I"u<p>While I was reading the draft of Dan Abramov‚Äôs Just Javascript, I stumbled upon the type of javascript <code class="highlighter-rouge">null</code>.</p>

<p>Try this out on your javascript console
<code class="highlighter-rouge">typeof null</code></p>

<p>Turns out that null gets considered as an object rather than a primitive data type, which is ‚Äì a bug. :(</p>

<p>This is a bug in JavaScript. A bug that has a history attached to it. It is so intense that it cannot be fixed now because almost the entire internet will crash because of it. Funny!</p>

<p>Now, According to the History</p>

<blockquote>
  <p>The ‚Äútypeof null‚Äù bug is a remnant from the first version of JavaScript. In this version, values were stored in 32 bit units, which consisted of a small type tag (1‚Äì3 bits) and the actual data of the value. The type tags were stored in the lower bits of the units</p>
</blockquote>

<p>Strange. There‚Äôs more.
This happens because of the following code</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>JS_PUBLIC_API(JSType)
JS_TypeOfValue(JSContext *cx, jsval v)
{
JSType type = JSTYPE_VOID;
JSObject *obj;
JSObjectOps *ops;
JSClass *clasp;

        CHECK_REQUEST(cx);
        if (JSVAL_IS_VOID(v)) {  // (1)
            type = JSTYPE_VOID;
        } else if (JSVAL_IS_OBJECT(v)) {  // (2)
            obj = JSVAL_TO_OBJECT(v);
            if (obj &amp;&amp;
                (ops = obj-&gt;map-&gt;ops,
                 ops == &amp;js_ObjectOps
                 ? (clasp = OBJ_GET_CLASS(cx, obj),
                    clasp-&gt;call || clasp == &amp;js_FunctionClass) // (3,4)
                 : ops-&gt;call != 0)) {  // (3)
                type = JSTYPE_FUNCTION;
            } else {
                type = JSTYPE_OBJECT;
            }
        } else if (JSVAL_IS_NUMBER(v)) {
            type = JSTYPE_NUMBER;
        } else if (JSVAL_IS_STRING(v)) {
            type = JSTYPE_STRING;
        } else if (JSVAL_IS_BOOLEAN(v)) {
            type = JSTYPE_BOOLEAN;
        }
        return type;
    }

</code></pre></div></div>

<blockquote>
  <p>Psst, While I was previewing the markdown of this code snippet, the browser crashed and it went into Infinite loop. ü§î</p>
</blockquote>

<p>The steps performed by the above code are:</p>

<ul>
  <li>At (1), the engine first checks whether the value v is undefined (VOID). This check is performed by comparing the value via equals:
<code class="highlighter-rouge">#define JSVAL_IS_VOID(v) ((v) == JSVAL_VOID)</code></li>
  <li>The next check (2) is whether the value has an object tag. If it additionally is either callable (3) or its internal property [[Class]] marks it as a function (4) then v is a function. Otherwise, it is an object. This is the result that is produced by typeof null.</li>
  <li>The subsequent checks are for number, string and boolean. There is not even an explicit check for null, which could be performed by the following C macro.
<code class="highlighter-rouge">#define JSVAL_IS_NULL(v) ((v) == JSVAL_NULL)</code></li>
</ul>

<h3 id="there-might-arise-one-question-is-typeof-also-a-bug-typeof-returns-an-object-which-is-correct-because-arrays-are-treated-as-objects-and-not-primitive-data-types">There might arise one question, is <code class="highlighter-rouge">typeof([])</code> also a bug? <code class="highlighter-rouge">typeof([])</code> returns an Object which is correct because arrays are treated as objects and not primitive data types.</h3>

<p>Subscribe to Dan‚Äôs course if you‚Äôd like, I love it because it is reengineering my brain to perceieve the most out of Javascript.</p>

<p><a href="https://justjavascript.com/">Just JavaScript</a></p>
:ET